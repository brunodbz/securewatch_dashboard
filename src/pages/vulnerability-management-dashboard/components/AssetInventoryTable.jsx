import React, { useState, useMemo } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import { Checkbox } from '../../../components/ui/Checkbox';

const AssetInventoryTable = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: 'exposureScore', direction: 'desc' });
  const [selectedAssets, setSelectedAssets] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);

  const assets = [
    {
      id: 1,
      hostname: "web-server-01.corp.local",
      ip: "192.168.1.10",
      os: "Ubuntu 20.04 LTS",
      vulnerabilityCount: 23,
      exposureScore: 8.7,
      lastScan: "2024-08-20T14:30:00Z",
      status: "critical",
      assetType: "Server",
      owner: "Web Team",
      location: "Data Center A"
    },
    {
      id: 2,
      hostname: "db-primary-01.corp.local",
      ip: "192.168.1.15",
      os: "Windows Server 2019",
      vulnerabilityCount: 18,
      exposureScore: 9.2,
      lastScan: "2024-08-20T13:45:00Z",
      status: "critical",
      assetType: "Database",
      owner: "Database Team",
      location: "Data Center A"
    },
    {
      id: 3,
      hostname: "app-server-02.corp.local",
      ip: "192.168.1.25",
      os: "CentOS 8",
      vulnerabilityCount: 12,
      exposureScore: 6.8,
      lastScan: "2024-08-20T12:20:00Z",
      status: "high",
      assetType: "Server",
      owner: "Application Team",
      location: "Data Center B"
    },
    {
      id: 4,
      hostname: "workstation-dev-05",
      ip: "192.168.2.45",
      os: "Windows 11 Pro",
      vulnerabilityCount: 8,
      exposureScore: 4.2,
      lastScan: "2024-08-20T11:15:00Z",
      status: "medium",
      assetType: "Workstation",
      owner: "Development Team",
      location: "Office Floor 3"
    },
    {
      id: 5,
      hostname: "firewall-main.corp.local",
      ip: "192.168.1.1",
      os: "FortiOS 7.2",
      vulnerabilityCount: 5,
      exposureScore: 7.1,
      lastScan: "2024-08-20T10:30:00Z",
      status: "high",
      assetType: "Network Device",
      owner: "Network Team",
      location: "Data Center A"
    },
    {
      id: 6,
      hostname: "mail-server-01.corp.local",
      ip: "192.168.1.30",
      os: "Ubuntu 22.04 LTS",
      vulnerabilityCount: 15,
      exposureScore: 7.8,
      lastScan: "2024-08-20T09:45:00Z",
      status: "high",
      assetType: "Server",
      owner: "IT Operations",
      location: "Data Center A"
    },
    {
      id: 7,
      hostname: "backup-server-01.corp.local",
      ip: "192.168.1.50",
      os: "Windows Server 2022",
      vulnerabilityCount: 6,
      exposureScore: 3.9,
      lastScan: "2024-08-20T08:20:00Z",
      status: "medium",
      assetType: "Server",
      owner: "Backup Team",
      location: "Data Center B"
    },
    {
      id: 8,
      hostname: "switch-core-01",
      ip: "192.168.1.2",
      os: "Cisco IOS 15.2",
      vulnerabilityCount: 3,
      exposureScore: 5.4,
      lastScan: "2024-08-20T07:15:00Z",
      status: "medium",
      assetType: "Network Device",
      owner: "Network Team",
      location: "Data Center A"
    },
    {
      id: 9,
      hostname: "workstation-hr-12",
      ip: "192.168.3.78",
      os: "macOS Sonoma 14.5",
      vulnerabilityCount: 4,
      exposureScore: 2.8,
      lastScan: "2024-08-20T06:30:00Z",
      status: "low",
      assetType: "Workstation",
      owner: "HR Department",
      location: "Office Floor 2"
    },
    {
      id: 10,
      hostname: "cloud-instance-web-03",
      ip: "10.0.1.45",
      os: "Amazon Linux 2",
      vulnerabilityCount: 11,
      exposureScore: 6.3,
      lastScan: "2024-08-20T05:45:00Z",
      status: "medium",
      assetType: "Cloud Instance",
      owner: "DevOps Team",
      location: "AWS us-east-1"
    },
    {
      id: 11,
      hostname: "print-server-01.corp.local",
      ip: "192.168.1.75",
      os: "Windows Server 2016",
      vulnerabilityCount: 19,
      exposureScore: 8.1,
      lastScan: "2024-08-20T04:20:00Z",
      status: "critical",
      assetType: "Server",
      owner: "IT Support",
      location: "Data Center B"
    },
    {
      id: 12,
      hostname: "workstation-finance-08",
      ip: "192.168.4.23",
      os: "Windows 10 Pro",
      vulnerabilityCount: 7,
      exposureScore: 4.7,
      lastScan: "2024-08-20T03:15:00Z",
      status: "medium",
      assetType: "Workstation",
      owner: "Finance Department",
      location: "Office Floor 1"
    }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case 'critical': return 'text-error';
      case 'high': return 'text-warning';
      case 'medium': return 'text-accent';
      case 'low': return 'text-success';
      default: return 'text-muted-foreground';
    }
  };

  const getStatusBg = (status) => {
    switch (status) {
      case 'critical': return 'bg-error/10';
      case 'high': return 'bg-warning/10';
      case 'medium': return 'bg-accent/10';
      case 'low': return 'bg-success/10';
      default: return 'bg-muted/10';
    }
  };

  const formatTimeAgo = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${diffInHours}h ago`;
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig?.key === key && sortConfig?.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const handleSelectAsset = (assetId) => {
    setSelectedAssets(prev => 
      prev?.includes(assetId)
        ? prev?.filter(id => id !== assetId)
        : [...prev, assetId]
    );
  };

  const filteredAssets = useMemo(() => {
    return assets?.filter(asset =>
      asset?.hostname?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||
      asset?.ip?.includes(searchTerm) ||
      asset?.os?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||
      asset?.owner?.toLowerCase()?.includes(searchTerm?.toLowerCase())
    );
  }, [searchTerm]);

  const handleSelectAll = () => {
    if (selectedAssets?.length === filteredAssets?.length) {
      setSelectedAssets([]);
    } else {
      setSelectedAssets(filteredAssets?.map(asset => asset?.id));
    }
  };

  const sortedAssets = useMemo(() => {
    const sorted = [...filteredAssets]?.sort((a, b) => {
      if (sortConfig?.key) {
        const aValue = a?.[sortConfig?.key];
        const bValue = b?.[sortConfig?.key];
        
        if (typeof aValue === 'string') {
          return sortConfig?.direction === 'asc' 
            ? aValue?.localeCompare(bValue)
            : bValue?.localeCompare(aValue);
        } else {
          return sortConfig?.direction === 'asc' 
            ? aValue - bValue
            : bValue - aValue;
        }
      }
      return 0;
    });
    return sorted;
  }, [filteredAssets, sortConfig]);

  const paginatedAssets = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return sortedAssets?.slice(startIndex, startIndex + itemsPerPage);
  }, [sortedAssets, currentPage, itemsPerPage]);

  const totalPages = Math.ceil(sortedAssets?.length / itemsPerPage);

  const getSortIcon = (key) => {
    if (sortConfig?.key !== key) return 'ArrowUpDown';
    return sortConfig?.direction === 'asc' ? 'ArrowUp' : 'ArrowDown';
  };

  return (
    <div className="bg-card border border-border rounded-lg elevation-1">
      {/* Header */}
      <div className="p-6 border-b border-border">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
          <div>
            <h2 className="text-lg font-semibold text-foreground mb-1">Asset Inventory</h2>
            <p className="text-sm text-muted-foreground">
              {sortedAssets?.length} assets â€¢ {selectedAssets?.length} selected
            </p>
          </div>
          
          <div className="flex flex-col sm:flex-row items-stretch sm:items-center space-y-3 sm:space-y-0 sm:space-x-3 mt-4 lg:mt-0">
            <Input
              type="search"
              placeholder="Search assets..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e?.target?.value)}
              className="w-full sm:w-64"
            />
            
            <div className="flex items-center space-x-2">
              <Button 
                variant="outline" 
                size="sm" 
                iconName="Download"
                disabled={selectedAssets?.length === 0}
              >
                Export ({selectedAssets?.length})
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                iconName="RefreshCw"
              >
                Scan
              </Button>
            </div>
          </div>
        </div>
      </div>
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-muted/50">
            <tr>
              <th className="w-12 p-4">
                <Checkbox
                  checked={selectedAssets?.length === filteredAssets?.length && filteredAssets?.length > 0}
                  onChange={handleSelectAll}
                />
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('hostname')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>Hostname</span>
                  <Icon name={getSortIcon('hostname')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('ip')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>IP Address</span>
                  <Icon name={getSortIcon('ip')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('os')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>Operating System</span>
                  <Icon name={getSortIcon('os')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('vulnerabilityCount')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>Vulnerabilities</span>
                  <Icon name={getSortIcon('vulnerabilityCount')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('exposureScore')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>Exposure Score</span>
                  <Icon name={getSortIcon('exposureScore')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('lastScan')}
                  className="flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary"
                >
                  <span>Last Scan</span>
                  <Icon name={getSortIcon('lastScan')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <span className="text-sm font-medium text-foreground">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody>
            {paginatedAssets?.map((asset) => (
              <tr key={asset?.id} className="border-t border-border hover:bg-muted/25">
                <td className="p-4">
                  <Checkbox
                    checked={selectedAssets?.includes(asset?.id)}
                    onChange={() => handleSelectAsset(asset?.id)}
                  />
                </td>
                <td className="p-4">
                  <div>
                    <div className="font-medium text-foreground text-sm">{asset?.hostname}</div>
                    <div className="text-xs text-muted-foreground">{asset?.assetType}</div>
                  </div>
                </td>
                <td className="p-4">
                  <span className="text-sm font-mono text-foreground">{asset?.ip}</span>
                </td>
                <td className="p-4">
                  <span className="text-sm text-foreground">{asset?.os}</span>
                </td>
                <td className="p-4">
                  <div className="flex items-center space-x-2">
                    <span className={`text-sm font-medium ${getStatusColor(asset?.status)}`}>
                      {asset?.vulnerabilityCount}
                    </span>
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBg(asset?.status)} ${getStatusColor(asset?.status)}`}>
                      {asset?.status}
                    </div>
                  </div>
                </td>
                <td className="p-4">
                  <div className="flex items-center space-x-2">
                    <span className={`text-sm font-bold ${getStatusColor(asset?.status)}`}>
                      {asset?.exposureScore}
                    </span>
                    <div className="w-16 bg-muted rounded-full h-1.5">
                      <div 
                        className={`h-1.5 rounded-full ${
                          asset?.exposureScore >= 8 ? 'bg-error' :
                          asset?.exposureScore >= 6 ? 'bg-warning' :
                          asset?.exposureScore >= 4 ? 'bg-accent' : 'bg-success'
                        }`}
                        style={{ width: `${(asset?.exposureScore / 10) * 100}%` }}
                      />
                    </div>
                  </div>
                </td>
                <td className="p-4">
                  <div>
                    <div className="text-sm text-foreground">{formatTimeAgo(asset?.lastScan)}</div>
                    <div className="text-xs text-muted-foreground">{asset?.owner}</div>
                  </div>
                </td>
                <td className="p-4">
                  <div className="flex items-center space-x-1">
                    <Button variant="ghost" size="xs" iconName="Eye">
                      View
                    </Button>
                    <Button variant="ghost" size="xs" iconName="Play">
                      Scan
                    </Button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* Pagination */}
      <div className="flex items-center justify-between p-4 border-t border-border">
        <div className="text-sm text-muted-foreground">
          Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedAssets?.length)} of {sortedAssets?.length} assets
        </div>
        
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            iconName="ChevronLeft"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
          >
            Previous
          </Button>
          
          <div className="flex items-center space-x-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const page = i + 1;
              return (
                <button
                  key={page}
                  onClick={() => setCurrentPage(page)}
                  className={`px-3 py-1 text-sm rounded-md ${
                    currentPage === page
                      ? 'bg-primary text-primary-foreground'
                      : 'text-muted-foreground hover:text-foreground hover:bg-muted'
                  }`}
                >
                  {page}
                </button>
              );
            })}
          </div>
          
          <Button
            variant="outline"
            size="sm"
            iconName="ChevronRight"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AssetInventoryTable;