import React, { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

import Button from '../../../components/ui/Button';

const VulnerabilityChart = () => {
  const [selectedAssetTypes, setSelectedAssetTypes] = useState(['servers', 'workstations', 'network', 'cloud']);
  const [timeRange, setTimeRange] = useState('7d');

  const chartData = [
    {
      name: 'Critical',
      servers: 145,
      workstations: 89,
      network: 67,
      cloud: 123,
      total: 424
    },
    {
      name: 'High',
      servers: 234,
      workstations: 156,
      network: 98,
      cloud: 187,
      total: 675
    },
    {
      name: 'Medium',
      servers: 456,
      workstations: 298,
      network: 145,
      cloud: 234,
      total: 1133
    },
    {
      name: 'Low',
      servers: 189,
      workstations: 234,
      network: 87,
      cloud: 105,
      total: 615
    }
  ];

  const assetTypes = [
    { key: 'servers', label: 'Servers', color: '#FF4444', count: 1024 },
    { key: 'workstations', label: 'Workstations', color: '#FF8800', count: 777 },
    { key: 'network', label: 'Network Devices', color: '#FFCC00', count: 397 },
    { key: 'cloud', label: 'Cloud Resources', color: '#4488FF', count: 649 }
  ];

  const timeRanges = [
    { value: '24h', label: '24 Hours' },
    { value: '7d', label: '7 Days' },
    { value: '30d', label: '30 Days' },
    { value: '90d', label: '90 Days' }
  ];

  const toggleAssetType = (assetType) => {
    setSelectedAssetTypes(prev => 
      prev?.includes(assetType) 
        ? prev?.filter(type => type !== assetType)
        : [...prev, assetType]
    );
  };

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload?.length) {
      const total = payload?.reduce((sum, entry) => sum + entry?.value, 0);
      
      return (
        <div className="bg-popover border border-border rounded-lg p-4 elevation-2">
          <p className="font-semibold text-popover-foreground mb-2">{`${label} Severity`}</p>
          {payload?.map((entry, index) => (
            <div key={index} className="flex items-center justify-between space-x-4 mb-1">
              <div className="flex items-center space-x-2">
                <div 
                  className="w-3 h-3 rounded-sm" 
                  style={{ backgroundColor: entry?.color }}
                />
                <span className="text-sm text-popover-foreground capitalize">{entry?.dataKey}</span>
              </div>
              <span className="text-sm font-medium text-popover-foreground">{entry?.value}</span>
            </div>
          ))}
          <div className="border-t border-border pt-2 mt-2">
            <div className="flex items-center justify-between">
              <span className="text-sm font-semibold text-popover-foreground">Total:</span>
              <span className="text-sm font-bold text-popover-foreground">{total}</span>
            </div>
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="bg-card border border-border rounded-lg p-6 elevation-1">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6">
        <div>
          <h2 className="text-lg font-semibold text-foreground mb-1">Vulnerability Distribution</h2>
          <p className="text-sm text-muted-foreground">Severity breakdown by asset type</p>
        </div>
        
        <div className="flex items-center space-x-3 mt-4 lg:mt-0">
          {/* Time Range Selector */}
          <div className="flex items-center space-x-1 bg-muted rounded-lg p-1">
            {timeRanges?.map((range) => (
              <button
                key={range?.value}
                onClick={() => setTimeRange(range?.value)}
                className={`px-3 py-1 text-xs font-medium rounded-md transition-colors ${
                  timeRange === range?.value
                    ? 'bg-primary text-primary-foreground'
                    : 'text-muted-foreground hover:text-foreground'
                }`}
              >
                {range?.label}
              </button>
            ))}
          </div>

          <Button variant="outline" size="sm" iconName="Download">
            Export
          </Button>
        </div>
      </div>
      {/* Chart */}
      <div className="h-80 mb-6">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="var(--color-border)" />
            <XAxis 
              dataKey="name" 
              stroke="var(--color-muted-foreground)"
              fontSize={12}
            />
            <YAxis 
              stroke="var(--color-muted-foreground)"
              fontSize={12}
            />
            <Tooltip content={<CustomTooltip />} />
            <Legend />
            
            {assetTypes?.map((assetType) => (
              selectedAssetTypes?.includes(assetType?.key) && (
                <Bar
                  key={assetType?.key}
                  dataKey={assetType?.key}
                  name={assetType?.label}
                  fill={assetType?.color}
                  radius={[2, 2, 0, 0]}
                />
              )
            ))}
          </BarChart>
        </ResponsiveContainer>
      </div>
      {/* Legend with Asset Type Toggles */}
      <div className="border-t border-border pt-4">
        <div className="flex flex-wrap gap-4">
          {assetTypes?.map((assetType) => (
            <button
              key={assetType?.key}
              onClick={() => toggleAssetType(assetType?.key)}
              className={`flex items-center space-x-2 px-3 py-2 rounded-lg border transition-all ${
                selectedAssetTypes?.includes(assetType?.key)
                  ? 'border-primary bg-primary/10 text-primary' :'border-border bg-muted/50 text-muted-foreground hover:text-foreground'
              }`}
            >
              <div 
                className="w-3 h-3 rounded-sm" 
                style={{ backgroundColor: assetType?.color }}
              />
              <span className="text-sm font-medium">{assetType?.label}</span>
              <span className="text-xs opacity-75">({assetType?.count})</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityChart;