import React from 'react';
import Icon from '../../../components/AppIcon';

const VulnerabilityMetrics = () => {
  const metrics = [
    {
      id: 1,
      title: "Total Vulnerabilities",
      value: "2,847",
      change: "+127",
      changeType: "increase",
      trend: "up",
      description: "Active vulnerabilities across all assets",
      target: "< 2,500",
      icon: "AlertTriangle"
    },
    {
      id: 2,
      title: "Critical Exposure Score",
      value: "8.2",
      change: "-0.3",
      changeType: "decrease",
      trend: "down",
      description: "Average CVSS score of critical vulnerabilities",
      target: "< 7.5",
      icon: "Shield"
    },
    {
      id: 3,
      title: "Avg Remediation Time",
      value: "14.2",
      change: "+2.1",
      changeType: "increase",
      trend: "up",
      description: "Days to resolve critical vulnerabilities",
      target: "< 10 days",
      icon: "Clock"
    },
    {
      id: 4,
      title: "Compliance Rate",
      value: "87.3%",
      change: "+3.2%",
      changeType: "increase",
      trend: "up",
      description: "Assets meeting security compliance standards",
      target: "> 95%",
      icon: "CheckCircle"
    }
  ];

  const getChangeColor = (changeType) => {
    return changeType === 'increase' ? 'text-error' : 'text-success';
  };

  const getTrendIcon = (trend) => {
    return trend === 'up' ? 'TrendingUp' : 'TrendingDown';
  };

  const getTargetStatus = (title, value) => {
    const numValue = parseFloat(value?.replace(/[^0-9.]/g, ''));
    
    switch (title) {
      case 'Total Vulnerabilities':
        return numValue < 2500 ? 'success' : 'warning';
      case 'Critical Exposure Score':
        return numValue < 7.5 ? 'success' : 'error';
      case 'Avg Remediation Time':
        return numValue < 10 ? 'success' : 'warning';
      case 'Compliance Rate':
        return numValue > 95 ? 'success' : 'warning';
      default:
        return 'muted';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'success': return 'text-success';
      case 'warning': return 'text-warning';
      case 'error': return 'text-error';
      default: return 'text-muted-foreground';
    }
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8">
      {metrics?.map((metric) => {
        const targetStatus = getTargetStatus(metric?.title, metric?.value);
        
        return (
          <div key={metric?.id} className="bg-card border border-border rounded-lg p-6 elevation-1">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                <div className="flex items-center justify-center w-10 h-10 bg-primary/10 rounded-lg">
                  <Icon name={metric?.icon} size={20} className="text-primary" />
                </div>
                <div>
                  <h3 className="text-sm font-medium text-muted-foreground">{metric?.title}</h3>
                  <div className="flex items-center space-x-2 mt-1">
                    <span className="text-2xl font-bold text-foreground">{metric?.value}</span>
                    <div className="flex items-center space-x-1">
                      <Icon 
                        name={getTrendIcon(metric?.trend)} 
                        size={16} 
                        className={getChangeColor(metric?.changeType)} 
                      />
                      <span className={`text-sm font-medium ${getChangeColor(metric?.changeType)}`}>
                        {metric?.change}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="space-y-2">
              <p className="text-xs text-muted-foreground">{metric?.description}</p>
              
              <div className="flex items-center justify-between">
                <span className="text-xs text-muted-foreground">Target:</span>
                <span className={`text-xs font-medium ${getStatusColor(targetStatus)}`}>
                  {metric?.target}
                </span>
              </div>

              {/* Progress indicator */}
              <div className="w-full bg-muted rounded-full h-1.5 mt-3">
                <div 
                  className={`h-1.5 rounded-full transition-all duration-300 ${
                    targetStatus === 'success' ? 'bg-success' :
                    targetStatus === 'warning' ? 'bg-warning' : 'bg-error'
                  }`}
                  style={{ 
                    width: targetStatus === 'success' ? '100%' : 
                           targetStatus === 'warning' ? '70%' : '40%' 
                  }}
                />
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default VulnerabilityMetrics;